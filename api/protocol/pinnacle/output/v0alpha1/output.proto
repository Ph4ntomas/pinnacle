syntax = "proto2";

package pinnacle.output.v0alpha1;

import "google/protobuf/empty.proto";

message Mode {
  optional uint32 pixel_width = 1;
  optional uint32 pixel_height = 2;
  optional uint32 refresh_rate_millihz = 3;
}

enum Transform {
  TRANSFORM_UNSPECIFIED = 0;
  TRANSFORM_NORMAL = 1;
  TRANSFORM_90 = 2;
  TRANSFORM_180 = 3;
  TRANSFORM_270 = 4;
  TRANSFORM_FLIPPED = 5;
  TRANSFORM_FLIPPED_90 = 6;
  TRANSFORM_FLIPPED_180 = 7;
  TRANSFORM_FLIPPED_270 = 8;
}

message SetLocationRequest {
  optional string output_name = 1;
  optional int32 x = 2;
  optional int32 y = 3;
}

message SetModeRequest {
  optional string output_name = 1;
  optional uint32 pixel_width = 2;
  optional uint32 pixel_height = 3;
  // NULLABLE
  optional uint32 refresh_rate_millihz = 4;
}

message SetModelineRequest {
  optional string output_name = 1;
  optional float clock = 2;
  optional uint32 hdisplay = 3;
  optional uint32 hsync_start = 4;
  optional uint32 hsync_end = 5;
  optional uint32 htotal = 6;
  optional uint32 vdisplay = 7;
  optional uint32 vsync_start = 8;
  optional uint32 vsync_end = 9;
  optional uint32 vtotal = 10;
  optional bool hsync_pos = 11;
  optional bool vsync_pos = 12;
}

message SetScaleRequest {
  optional string output_name = 1;
  oneof absolute_or_relative {
    float absolute = 2;
    float relative = 3;
  }
}

message SetTransformRequest {
  optional string output_name = 1;
  optional Transform transform = 2;
}

message SetPoweredRequest {
  optional string output_name = 1;
  optional bool powered = 2;
}

message GetRequest {}
message GetResponse {
  repeated string output_names = 1;
}

message GetPropertiesRequest {
  optional string output_name = 1;
}
message GetPropertiesResponse {
  // The monitor's manufacturer
  optional string make = 1;
  // The model of the monitor
  optional string model = 2;
  // The x-coord of the output in the global space
  optional int32 x = 3;
  // The y coord of the output in the global space
  optional int32 y = 4;
  // The logical width of the output in the global space
  // taking into account scaling, in pixels.
  optional uint32 logical_width = 13;
  // The logical height of the output in the global space
  // taking into account scaling, in pixels.
  optional uint32 logical_height = 14;
  // NULLABLE
  //
  // The current mode
  optional Mode current_mode = 5;
  // NULLABLE
  //
  // The preferred mode
  optional Mode preferred_mode = 6;
  // All available modes
  repeated Mode modes = 7;
  // In millimeters
  optional uint32 physical_width = 8;
  // In millimeters
  optional uint32 physical_height = 9;
  optional bool focused = 10;
  repeated uint32 tag_ids = 11;
  optional float scale = 12;
  optional Transform transform = 15;
  // NULLABLE
  //
  // The EDID serial number of this output, if it exists.
  optional uint32 serial = 16;
  // Window ids of the keyboard focus stack for this output.
  repeated uint32 keyboard_focus_stack_window_ids = 17;
  optional bool enabled = 18;
  optional bool powered = 19;
  optional string serial_str = 20;
}

service OutputService {
  rpc SetLocation(SetLocationRequest) returns (google.protobuf.Empty);
  rpc SetMode(SetModeRequest) returns (google.protobuf.Empty);
  rpc SetModeline(SetModelineRequest) returns (google.protobuf.Empty);
  rpc SetScale(SetScaleRequest) returns (google.protobuf.Empty);
  rpc SetTransform(SetTransformRequest) returns (google.protobuf.Empty);
  rpc SetPowered(SetPoweredRequest) returns (google.protobuf.Empty);
  rpc Get(GetRequest) returns (GetResponse);
  rpc GetProperties(GetPropertiesRequest) returns (GetPropertiesResponse);
}
